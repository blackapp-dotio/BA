name: Build iOS App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: macos-14  # Use the latest macOS runner

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Node.js Version (Match Local)
        uses: actions/setup-node@v3
        with:
          node-version: 14  # Ensure compatibility with Webpack 4 & React Scripts 3.4.4

      - name: Optimize Node.js Memory
        run: |
          echo "NODE_OPTIONS=--max-old-space-size=16384 --openssl-legacy-provider" >> $GITHUB_ENV
          node --expose-gc -e 'gc()'

      - name: Force Garbage Collection
        run: node --expose-gc -e 'gc()'

      - name: Reset Dependencies & Clear Cache
        run: |
          echo "🔹 Removing old dependencies..."
          rm -rf node_modules package-lock.json yarn.lock
          npm cache clean --force
          echo "✅ Cache cleaned."

      - name: Install Exact Working Webpack & React-Scripts Versions
        run: |
          echo "🔹 Installing correct versions..."
          npm install react-scripts@3.4.4 \
                      webpack@4.42.0 \
                      webpack-dev-server@3.11.0 \
                      react-app-rewired@2.1.6 \
                      --legacy-peer-deps --force
          echo "✅ Installed working versions."

      - name: Remove Conflicting Dependencies
        run: |
          echo "🔹 Removing Webpack 5 and incompatible packages..."
          npm uninstall webpack-cli eslint-webpack-plugin \
                        @babel/eslint-parser crypto-browserify \
                        stream-browserify buffer --legacy-peer-deps --force
          echo "✅ Removed incompatible dependencies."

      - name: Install Remaining Dependencies
        run: |
          npm install --no-optional --legacy-peer-deps --force
          npm audit fix --force || true
          echo "✅ Installed additional dependencies."

      - name: Verify Installed Webpack Versions
        run: |
          npm list webpack webpack-cli webpack-dev-server react-scripts
          echo "✅ Dependency versions verified."

      - name: Ensure React Native Dependencies Exist
        run: |
          npm install @react-native-community/cli @react-native-community/cli-platform-ios --legacy-peer-deps --force

      - name: Verify node_modules Before Running Pod Install
        run: |
          if [ ! -d "node_modules" ]; then
            echo "❌ node_modules directory is MISSING! Aborting pod install."
            exit 1
          fi
          echo "✅ node_modules exists. Proceeding with pod install."

      - name: Ensure iOS Project Exists
        run: |
          if [ ! -d "ios/BlackApp.xcodeproj" ]; then
            echo "❌ Missing iOS project! Attempting to regenerate..."
            npx react-native eject
          else
            echo "✅ iOS project exists."
          fi

      # 🔹 Code Signing
      - name: Import Distribution Certificate
        env:
          DISTRIBUTION_CERTIFICATE: ${{ secrets.DISTRIBUTION_CERTIFICATE }}
          DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSWORD }}
        run: |
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > signing.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import signing.p12 -t agg -k build.keychain -P "$DISTRIBUTION_CERTIFICATE_PASSWORD" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          rm -f signing.p12

      - name: Install Provisioning Profile
        env:
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
        run: |
          echo "$PROVISIONING_PROFILE" | base64 --decode > BlackApp.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mv BlackApp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Fix ESLint Issues
        run: |
          npm uninstall eslint eslint-plugin-flowtype --legacy-peer-deps --force
          npm install eslint@8.57.0 eslint-plugin-flowtype@8.0.3 --legacy-peer-deps --force

      - name: Install Secure Firebase Versions
        run: |
          npm uninstall @firebase/auth @firebase/auth-compat @firebase/firestore @firebase/firestore-compat @firebase/functions @firebase/functions-compat @firebase/storage @firebase/storage-compat webpack-dev-middleware yargs-parser --legacy-peer-deps --force
          npm install @firebase/auth-compat@0.5.18 \
                      @firebase/firestore@4.7.7 \
                      @firebase/firestore-compat@0.3.42 \
                      @firebase/functions@0.12.2 \
                      @firebase/functions-compat@0.3.19 \
                      @firebase/storage@0.13.6 \
                      @firebase/storage-compat@0.3.16 \
                      --legacy-peer-deps

      - name: Ensure Dependencies Are Installed
        run: |
          npm install --no-optional --legacy-peer-deps --force
          npm prune
          npm audit fix --force || true

      - name: Build React App
        env:
          CI: false
        run: |
          npm run build 
          echo "✅ React build completed."

      - name: Build iOS App (Archive Only)
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
          TEAM_ID: A7Q8XT75CC  # Hardcoded Team ID
        run: |
          xcodebuild -workspace ios/BlackApp.xcworkspace \
                     -scheme BlackApp \
                     -sdk iphoneos \
                     -configuration Release \
                     -archivePath $GITHUB_WORKSPACE/build/BlackApp.xcarchive archive \
                     CODE_SIGN_IDENTITY="iPhone Distribution" \
                     DEVELOPMENT_TEAM=$TEAM_ID \
                     PROVISIONING_PROFILE_SPECIFIER="" \
                     CODE_SIGN_STYLE=Manual
          echo "✅ iOS build completed."

      - name: Upload .xcarchive as an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: BlackApp-xcarchive
          path: build/BlackApp.xcarchive
