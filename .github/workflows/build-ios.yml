name: Build iOS App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: macos-14  # Use a more powerful macOS runner

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Enable Swap Memory
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          free -h

      - name: Set Node.js Memory Limit
        run: echo "NODE_OPTIONS=--max-old-space-size=12288" >> $GITHUB_ENV

      - name: Force Garbage Collection
        run: node --expose-gc -e 'gc()'

      - name: Install Dependencies
        run: |
          cd ios
          pod install --repo-update

      - name: Install Webpack Manually
        run: npm install webpack webpack-dev-server --save-dev

      # ðŸ”¹ Import and configure the signing certificate
      - name: Import Distribution Certificate
        env:
          DISTRIBUTION_CERTIFICATE: ${{ secrets.DISTRIBUTION_CERTIFICATE }}
          DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSWORD }}
        run: |
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode -o signing.p12  # âœ… Just decoding
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import signing.p12 -t agg -k build.keychain -P "$DISTRIBUTION_CERTIFICATE_PASSWORD" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          rm -f signing.p12

      # ðŸ”¹ Install provisioning profile
      - name: Install Provisioning Profile
        env:
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
        run: |
          echo "$PROVISIONING_PROFILE" | base64 --decode -o BlackApp.mobileprovision  # âœ… Just decoding
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mv BlackApp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/  # âœ… Verify installation

      - name: Build React App
        env:
          CI: false  # Prevents unnecessary logging that consumes memory
        run: npm run build

      - name: Build iOS App
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
        run: |
          xcodebuild -workspace ios/BlackApp.xcworkspace \
                     -scheme BlackApp \
                     -sdk iphoneos \
                     -configuration Release \
                     -archivePath $GITHUB_WORKSPACE/build/BlackApp.xcarchive archive \
                     DEVELOPMENT_TEAM=A7Q8XT75CC   # âœ… Hardcoded Team ID
                     CODE_SIGN_IDENTITY="Apple Distribution" \
                     PROVISIONING_PROFILE_SPECIFIER="BlackApp App Store Profile"

      # ðŸ”¹ âœ… Manually Sign and Export .ipa using xcrun (Alternative to `xcodebuild -exportArchive`)
      - name: Manually Sign and Export .ipa
        env:
          TEAM_ID: A7Q8XT75CC
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
          DISTRIBUTION_CERTIFICATE: ${{ secrets.DISTRIBUTION_CERTIFICATE }}
          DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSWORD }}
        run: |
          # âœ… Convert base64 provisioning profile back to file
          echo "$PROVISIONING_PROFILE" | base64 --decode > BlackApp.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mv BlackApp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

          # âœ… Convert base64 distribution certificate
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > signing.p12
          
          # âœ… Import Certificate to Keychain
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import signing.p12 -t agg -k build.keychain -P "$DISTRIBUTION_CERTIFICATE_PASSWORD" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          rm -f signing.p12

          # âœ… Manually export .ipa using xcrun
          xcrun -sdk iphoneos PackageApplication \
            -v $GITHUB_WORKSPACE/build/BlackApp.xcarchive/Products/Applications/BlackApp.app \
            -o $GITHUB_WORKSPACE/build/BlackApp.ipa \
            -embed ~/Library/MobileDevice/Provisioning\ Profiles/BlackApp.mobileprovision \
            -sign "Apple Distribution"

      - name: Upload .ipa as an Artifact
        uses: actions/upload-artifact@v3
        with:
          name: BlackApp-ipa
          path: build/*.ipa
