name: Build iOS App

on:
  push:
    branches:
      - main
      
jobs:
  build:
    runs-on: macos-14  # Use the latest stable macOS version

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4  # Upgraded to latest version

      - name: Set Node.js Memory Limit
        run: echo "NODE_OPTIONS=--max-old-space-size=12288" >> $GITHUB_ENV

      - name: Force Garbage Collection
        run: node --expose-gc -e 'gc()'

      # âœ… Clean and Install Dependencies Safely
      - name: Install JavaScript Dependencies
        run: |
          rm -rf node_modules package-lock.json  # Ensure a clean install
          npm cache clean --force  # Clear any corrupt cache
          npm install --legacy-peer-deps --force  # Avoid strict peer dependency issues
          npm audit fix --force  # Fix potential security vulnerabilities

      # âœ… Install CocoaPods for iOS dependencies
      - name: Install iOS Dependencies
        run: |
          cd ios
          pod repo update  # Update pod repo before install
          pod install --verbose --no-repo-update  # Use verbose mode for debugging

      # âœ… Ensure Webpack is Installed
      - name: Install Webpack Manually
        run: npm install webpack webpack-dev-server --save-dev

      # âœ… Configure Xcode Version (Explicitly)
      - name: Set Xcode Version
        run: sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer

      # ðŸ”¹ Import and Configure the Signing Certificate
      - name: Import Distribution Certificate
        env:
          DISTRIBUTION_CERTIFICATE: ${{ secrets.DISTRIBUTION_CERTIFICATE }}
          DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSWORD }}
        run: |
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > signing.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import signing.p12 -t agg -k build.keychain -P "$DISTRIBUTION_CERTIFICATE_PASSWORD" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          rm -f signing.p12

      # ðŸ”¹ Install the Provisioning Profile
      - name: Install Provisioning Profile
        env:
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
        run: |
          echo "$PROVISIONING_PROFILE" | base64 --decode > BlackApp.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mv BlackApp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      # âœ… Build React App First
      - name: Build React App
        env:
          CI: false  # Prevents unnecessary logging that consumes memory
        run: npm run build

      # âœ… Archive iOS App (Xcode Build)
      - name: Build iOS App (Archive Only)
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
          TEAM_ID: A7Q8XT75CC  # Hardcoded Team ID
        run: |
          xcodebuild -workspace ios/BlackApp.xcworkspace \
                     -scheme BlackApp \
                     -sdk iphoneos \
                     -configuration Release \
                     -archivePath $GITHUB_WORKSPACE/build/BlackApp.xcarchive archive \
                     CODE_SIGN_IDENTITY="iPhone Distribution" \
                     DEVELOPMENT_TEAM=$TEAM_ID \
                     PROVISIONING_PROFILE_SPECIFIER="" \
                     CODE_SIGN_STYLE=Manual

      # ðŸ”¹ Upload .xcarchive as an Artifact for Download
      - name: Upload .xcarchive for Download
        uses: actions/upload-artifact@v4
        with:
          name: BlackApp-xcarchive
          path: build/BlackApp.xcarchive
